/**		ImageStorage by oMicrone	- úschovna obrázků pro duplikace a správu nahrávání		ChangeLog:		0.1 - ADDED: load, getInfo	0.2 - ADDED: create, force, isLoaded, getLoadStatus, getImage		  CHANGED: load	0.3 - ADDED: loadByID, loadByName, getInfoByName, getImageByName	*/package com.omicrone {		import flash.display.Bitmap;	import flash.display.BitmapData;	import flash.display.DisplayObject;	import flash.display.Loader;	import flash.display.MovieClip;	import flash.display.Sprite;	import flash.events.Event;	import flash.events.IOErrorEvent;	import flash.events.ProgressEvent;	import flash.net.URLRequest;	import flash.system.LoaderContext;		public class ImageStorage {				private static var globals:Object = {};		private static var settings:Object = {};		private static var images:Array = new Array();		private static var lastImageUsed:uint = 0;		public static function findImageByName (name:String):ImageMeta {			for (var i:uint = 0; i < images.length; i++) {				var im:ImageMeta = images[i];				if (im.name == name) return im;			}			Log.add ("obrázek s name " + name + " nebyl nalezen", "ImageStorage");			return null;		}				public static function findImageByID (id:uint):ImageMeta {						for (var i:uint = 0; i < images.length; i++) {				var im:ImageMeta = images[i];				if (im.id == id) return im;			}			Log.add ("obrázek s id " + id + " nebyl nalezen", "ImageStorage");			return null;		}				// LOADS				/**			Funkce vytvoří nový objekt, který je kontrolorem pro obrázek v rámci třídy			Funkce se volá buď přímo, nebo jako součást funkce force(), aby byla zachována konzistence a unikátnost v rámci třídy		*/		public static function create (link:String, name:String = null):ImageMeta {						var im:ImageMeta = new ImageMeta (images.length, link, name);			images.push(im);						lastImageUsed = images.length - 1;						return im;		}				/**			Zrychlené načítání			Funkce spojuje oddělené funkce create() a load() a umožňuje po nahrání vytvoření okamžité kopie do daného MC			Funkce podporuje dynamické události		*/		public static function force (link:String, target:*, name:String = null, fce:Function = null, event:String = null, eventMC:DisplayObject = null):uint {			Log.add("načítání obrázku: " + im.id + " do " + target.name, "ImageStorage");						var im:ImageMeta = create (link, name);			load(im, fce, target, null, event, eventMC);						return lastImageUsed;		}				/**			Načtení obrázku podle jeho indexu			Funkce podporuje dynamické události a okamžité diplikování do MC		*/		public static function loadByID (id:uint, fce:Function = null, target:MovieClip = null, event:String = null, eventMC:DisplayObject = null):void {			var im:ImageMeta = findImageByID(id);			ImageStorage.load (im, fce, target, null, event, eventMC);		}				/**			Načtení obrázku podle uživatelského jména			Funkce podporuje dynamické události a okamžité diplikování do MC		*/		public static function loadByName (s:String, fce:Function = null, target:MovieClip = null, event:String = null, eventMC:DisplayObject = null):void {			var im:ImageMeta = findImageByName(s);			ImageStorage.load (im, fce, target, null, event, eventMC);		}				/**			Nahrání obrázku			Funkce nahraje obrázek podle informací z obecného objektu Image, část těchto funkcí je také aktualizována (velikost, stav nahrávání, ..)			Funkce podporuje dynamické události a okamžité diplikování do MC		*/		public static function load (im:ImageMeta, fce:Function = null, target:* = null, fceE:Function = null, event:* = null, eventMC:* = null, context:LoaderContext = null, forcedReload:Boolean = false):void {			Log.add("načítání obrázku: " + im.id, "ImageStorage");						if (!im.image.contentLoaderInfo.hasEventListener(Event.INIT)) im.image.contentLoaderInfo.addEventListener (Event.INIT, loadStart);			if (!im.image.contentLoaderInfo.hasEventListener(Event.COMPLETE)) {				im.image.contentLoaderInfo.addEventListener (Event.COMPLETE, fce);				im.image.contentLoaderInfo.addEventListener (Event.COMPLETE, loadComplete);			}			if (!im.image.contentLoaderInfo.hasEventListener(IOErrorEvent.IO_ERROR)) {				im.image.contentLoaderInfo.addEventListener (IOErrorEvent.IO_ERROR, loadError);				im.image.contentLoaderInfo.addEventListener (IOErrorEvent.IO_ERROR, fceE);				}				if (!im.image.contentLoaderInfo.hasEventListener(ProgressEvent.PROGRESS)) im.image.contentLoaderInfo.addEventListener (ProgressEvent.PROGRESS, loadProgress);									function loadStart (e:Event):void {				im.init();			}						function loadComplete (e:Event = null):void {				im.loaded();								if (target != null) target.addChild (ImageStorage.getImage (im));				if (eventMC != null && event != null)  eventMC.dispatchEvent (new Event (event));			}						function loadError (e:Event):void {				Log.add("chyba načítání z adresy: " + im.link, "ImageStorage");				if (eventMC != null && event != null) eventMC.dispatchEvent (new Event ("loadImage_ERROR"));			}						function loadProgress (e:ProgressEvent):void {				im.loadBytes = e.bytesLoaded;				im.loadTotal = e.bytesTotal;			}						if (im.loadDone && !forcedReload) {								Log.add("tento obrázek je již načtený", "[ImageStorage]");								loadComplete ();			} else {				if (forcedReload) {										var newLink:String = im.link;										if ((newLink).split("?").length == 1) {						newLink += "?timestamp=" + ((new Date()).time);					} else {						newLink += "&timestamp=" + ((new Date()).time);					}										trace ("přenačtení obrázku: " + newLink, "[ImageStorage]");										im.destroy();										im.image.load (new URLRequest(newLink), context);				} else {										trace ("načtení obrázku: " + newLink, "[ImageStorage]");										im.image.load (new URLRequest(im.link), context);				}			}					}				// CHECKS				/**			Kontrola stavu nahrávání			Prochází celou galerii nebo její část definovanou indexy, zda jsou všechny obrázky načteny		*/		public static function imagesLoaded (startIndex:Number = 0, endIndex:Number = -1):Boolean {						if (endIndex == 1) endIndex = images.length;						for (var i:uint=startIndex; i<endIndex; i++) {				if (!(images[i] as ImageMeta).loadDone) return false;			}						return true;		}				// GETS				/**			Vratí Bitmap daného obrázku podle indexu v galerii		*/		public static function getImage (im:ImageMeta):Bitmap {						Log.add("duplikace "+im.link, "ImageStorage");						var source:Bitmap = (im.image.content as Bitmap);			var sourceData:BitmapData = source.bitmapData;			var duplicate:Bitmap = new Bitmap (sourceData.clone());						duplicate.smoothing = true;						return duplicate;		}      				/**			Vratí Bitmap podle názvu obrázku v galerii			 * 			 * @param s (String) název obrázku v galerii			 * 			 * @return Bitmap		*/		public static function getImageByName (s:String):Bitmap {						var im:ImageMeta = findImageByName (s);			if (im != null) return getImage (im);			return null;		}	}}