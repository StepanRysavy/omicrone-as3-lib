/**		Commons by oMicrone	- sdružuje základní funkce		Globals:	timer (uint): časovač	regexList (ArrayMap of RegExp): sbírka regulárních výrazů	xmlList (Array of URLLoader): sbírka načítacích tříd pro XML	preloaderInfo (Object): souhrnné informace o načítání	contextMenuList (ContextMenu): kontextové menu		ChangeLog:	0.1 - ADDED: loadXML, getXML, go, ga	0.2 - ADDED: createRegex, getRegex, textReplace	0.3 - ADDED: preloader, addLinkToContextMenu, addEventToContextMenu, addToContextMenu, removeFromContextMenu	0.4 - ADDED: getClass	*/package com.omicrone {		import flash.display.LoaderInfo;	import flash.events.ContextMenuEvent;	import flash.events.Event;	import flash.events.IOErrorEvent;	import flash.events.MouseEvent;	import flash.events.ProgressEvent;	import flash.external.ExternalInterface;	import flash.net.URLLoader;	import flash.net.URLRequest;	import flash.net.navigateToURL;	import flash.text.TextField;	import flash.text.TextFormat;	import flash.ui.ContextMenu;	import flash.ui.ContextMenuItem;	import flash.ui.Mouse;	import flash.ui.MouseCursor;	import flash.utils.getDefinitionByName;	import flash.utils.getQualifiedClassName;	import flash.events.EventDispatcher;	import flash.display.MovieClip;		public class Commons {				public static var globals:Object = {};		public static var gaURL:String = "trackPage";		public static var gaTitle:String = "trackTitle";				/**			Vrátí třídu objektu		*/		public static function getClass(obj:Object):Class {			return Class (getDefinitionByName (getQualifiedClassName(obj)));		}		// SIMPLE TIMER				/**			Časovač, který lze přiřadit MC nebo volat přímo na MC		*/		public static function timer (eventMC:*, fce:Function = null, i:uint = 24, event:String = "timer"):void {			trace ("  ~ startuji timer na", i, "frames");						eventMC.addEventListener (Event.ENTER_FRAME, stepper);			if (fce != null) eventMC.addEventListener (event, fce);						function stepper (e:Event):void {				i--;								if (i == 0) {										trace ("  ~ timer skončil, volám událost", event, "u objektu", eventMC.name);										eventMC.dispatchEvent (new Event (event));										eventMC.removeEventListener (Event.ENTER_FRAME, stepper); 					if (fce != null) eventMC.removeEventListener (event, fce);				}			}		}				// STRING TRANSFORMATIONS				/**			Nahrazení textu předpřipraveným regulárním výrazem		*/		public static function textReplace (s:String, regexName:String):String {			trace ("  ~ nahrazuji text", s, "regularnim vyrazem", regexName);						return s.replace (s, getRegex (regexName));		}				/**			Vytvoření nového regulárního výrazu a vložení do DB		*/		public static function createRegex (name:String, regex:RegExp):void {			trace ("  ~ vytvářím nový regulární záznam", name, ":", regex);						if (globals.regexList == undefined) globals.regexList = new Array();						globals.regexList[name] = regex;		}				/**			Vrátí regulární výraz podle požadovaného jména		*/		public static function getRegex (name:String):RegExp {			trace ("  ~ vracím regex", name);						if (globals.regexList == undefined) {				return null;			} else {				if (globals.regexList[name]==undefined) {					return null;				} else {					return globals.regexList[name];				}			}		}				// NAVIGATION				/**			Odkáže na dané URI a zapíše se do analytics 		*/		public static function go (url:String, target:String = "_blank"):void {						Log.add ("přecházím na stránku  " + url + " v okně " + target, "LIB:Commons");						if (globals.enableGA != undefined) {				if (globals.enableGA) ga ("/redirect/" + url, "Redirect to page " + url);			} 						navigateToURL(new URLRequest(url), target);		}				/**			Volá externí funkcí pro zápis do Google Analytics		*/		public static function ga (s:String, t:String):void {			Log.add ("Google url: "+ s + ", nadpis stránky:" + t, "LIB:Commons"); 			ExternalInterface.call(gaTitle, t); 			ExternalInterface.call(gaURL, s);		}				// XML				/**			Načte externí XML a po načtení zavolá daný event		*/		public static function loadXML (link:String, event:String, eventMC:*):uint {			trace ("  ~","načítám XML z adresy",link);						if (globals.xmlList == undefined) globals.xmlList = new Array();			var xmlLoader:URLLoader = new URLLoader();			globals.xmlList.push(xmlLoader);						xmlLoader.addEventListener (Event.COMPLETE, loadComplete);			xmlLoader.addEventListener (IOErrorEvent.IO_ERROR, loadError);						xmlLoader.load (new URLRequest(link));						function loadError(e:IOErrorEvent):void {				trace ("  ~","chyba načítání z adresy",link);				eventMC.dispatchEvent (new Event ("loadXML_ERROR"));			}						function loadComplete (e:Event):void {				trace ("  ~","data úspěšně načtena z adresy",link);				eventMC.dispatchEvent (new Event (event));			}						return uint(globals.xmlList.length - 1);		}				/**			Vrátí načtené XML daného indexu (nebo poslední načítané)		*/		public static function getXML(... restParam):XML {			trace ("  ~","vracím dané xml");						var index:uint = globals.xmlList.length - 1;						if (restParam[0] != undefined) index = new uint (restParam[0]);						if (index != -1) {				return XML(globals.xmlList[index].data);			} else {				return null;			}		}				// PRELOADER				/** 			Vrací hodnotu flashVars		*/		public static function flashVars (loaderInfo:LoaderInfo, vars:String, defValue:* = null):* {			//trace ("  ~ vracím hodnotu z flashVars", vars);						if (loaderInfo.parameters[vars] == undefined) {				return defValue;			} else {				return loaderInfo.parameters[vars];			}		}				/**			Spustí načítání flashe včetně hlášení událostí po dokončení		*/		public static function preloader (loaderInfo:LoaderInfo, fceComplete:Function = null, fceProgress:Function = null):Object {			trace ("  ~ preloader");						var mc:EventDispatcher = new EventDispatcher();						globals.preloaderInfo = {}			globals.preloaderInfo.bytes = 0;			globals.preloaderInfo.total = 0;			globals.preloaderInfo.percent = 0;						function update(e:ProgressEvent):void {				globals.preloaderInfo.bytes = e.bytesLoaded;				globals.preloaderInfo.total = e.bytesTotal;				globals.preloaderInfo.percent = Math.round(globals.preloaderInfo.bytes / globals.preloaderInfo.total * 1000) / 10;			}						loaderInfo.addEventListener(ProgressEvent.PROGRESS, update);			if (fceProgress != null) loaderInfo.addEventListener(ProgressEvent.PROGRESS, fceProgress);			if (fceComplete != null) loaderInfo.addEventListener(Event.COMPLETE, fceComplete);			if (fceComplete != null) mc.addEventListener("done", fceComplete);						if (loaderInfo.bytesLoaded == loaderInfo.bytesTotal) {				mc.dispatchEvent(new Event("done"));				mc.removeEventListener("done", fceComplete);				loaderInfo.removeEventListener(Event.COMPLETE, fceComplete);			}						return globals.preloaderInfo;		}				// CONTENT MENU						/**			Přidá odkaz do kontextového menu		*/		public static function addLinkToContextMenu (s:String, link:String):ContextMenu {			trace ("  ~ přidávám odkaz do kontextového menu na stránky", link);						return addToContextMenu (s, link, null, null);		}				/**			Přidá spouštěč události do kontextového menu		*/		public static function addEventToContextMenu (s:String, event:String, eventMC:*):ContextMenu {			trace ("  ~ přidávám odkaz do kontextového menu na událost", event);						return addToContextMenu (s, null, event, eventMC);		}				/**			Odstraní z kontextového menu všechny položky daného jména		*/		public static function removeFromContextMenu (s:String):ContextMenu {			trace ("  ~ odstraňuji z kontextového menu řádek",s);						var newCM:ContextMenu = globals.contextMenuList;						for (var i:uint=0; i < newCM.customItems.length; i++) {				if (newCM.customItems[i].caption == s) {					newCM.customItems.splice (i,1);				}			}						globals.contextMenuList = newCM;						return globals.contextMenuList;		}				/**			Vloží do kontextového menu nový odkaz		*/		public static function addToContextMenu (s:String, link:String = null, event:String = null, eventMC:* = null):ContextMenu {			trace ("  ~ přidávám do kontextového menu",s ,event, link);						var newCM:ContextMenu;						if (globals.contextMenuList == undefined) {				newCM = new ContextMenu ();				newCM.hideBuiltInItems();			} else {				newCM = globals.contextMenuList;			}						var newCMItem:ContextMenuItem = new ContextMenuItem (s);						newCMItem.addEventListener(ContextMenuEvent.MENU_ITEM_SELECT, itemClick);						function itemClick(e:Event):void {				if (event != null) eventMC.dispatchEvent (new Event (event));				if (link != null) go (link);			}						newCM.customItems.push (newCMItem);						globals.contextMenuList = newCM;						return globals.contextMenuList;		}				// BUTTON				/**		 *  Zruší přiřazené funkce		 */		public static function destroyButton (mc:*, clickAction:Function = null, clickAnimation:Function = null, hoverAnimation:Function = null, hoverAwayAnimation:Function = null, event:String = null):void {			trace ("  ~ ruším tlačítko", mc.name);						mc.removeEventListener(MouseEvent.MOUSE_OVER, itemOver);			mc.removeEventListener(MouseEvent.MOUSE_OUT, itemOut);						itemOut ();						if (hoverAwayAnimation != null) mc.removeEventListener(MouseEvent.MOUSE_OUT, hoverAwayAnimation);			if (hoverAnimation != null) mc.removeEventListener(MouseEvent.MOUSE_OVER, hoverAnimation);			if (clickAnimation != null) mc.removeEventListener(MouseEvent.CLICK, clickAnimation);			if (clickAction != null) mc.removeEventListener(MouseEvent.CLICK, clickAction);			if (event != null) mc.removeEventListener(MouseEvent.CLICK, itemClick);		}				/**			Vytvoří z libovolného objektu tlačítko s odkazem na předem definovanou funkci		*/		public static function createButton (mc:*, clickAction:Function = null, clickAnimation:Function = null, hoverAnimation:Function = null, hoverAwayAnimation:Function = null, event:String = null):void {			trace ("  ~ vytvářím z", mc.name,"tlačítko");						mc.addEventListener(MouseEvent.MOUSE_OVER, itemOver);			mc.addEventListener(MouseEvent.MOUSE_OUT, itemOut);						if (hoverAwayAnimation != null) mc.addEventListener(MouseEvent.MOUSE_OUT, hoverAwayAnimation);			if (hoverAnimation != null) mc.addEventListener(MouseEvent.MOUSE_OVER, hoverAnimation);			if (clickAnimation != null) mc.addEventListener(MouseEvent.CLICK, clickAnimation);			if (clickAction != null) mc.addEventListener(MouseEvent.CLICK, clickAction);			if (event != null) mc.addEventListener(MouseEvent.CLICK, itemClick);		}				public static function delay (time:Number, fce:Function):void {			var mc:MovieClip = new MovieClip();			var now:Number = new Date ().time;			mc.addEventListener(Event.ENTER_FRAME, ef);						function ef (e:Event) {				if (new Date().time - now > time) {					mc.removeEventListener(Event.ENTER_FRAME, ef);					fce();				}			}		}					static function itemOver (e:Event):void {			Mouse.cursor = MouseCursor.BUTTON;		}					static function itemOut (e:Event = null):void {			Mouse.cursor = MouseCursor.AUTO;		}				static function itemClick (e:Event):void {			e.target.dispatchEvent(new Event(e.target.event));		}				public static function createEventButton (mc:*, event:String, clickAnimation:Function = null, hoverAnimation:Function = null, hoverAwayAnimation:Function = null):void {			//trace ("  ~ vytvářím z", mc.name,"tlačítko s událostí");						createButton (mc, null, clickAnimation, hoverAnimation, hoverAwayAnimation, event);		}				public static function createObjectEffects (mc:*, rollOverEvent:String = null, rollOver:Function = null, rollOutEvent:String = null, rollOut:Function = null):void {			trace ("  ~ vytvářím efekty k objektu", mc.name);						if (rollOver != null) mc.addEventListener(MouseEvent.ROLL_OVER, rollOver);			if (rollOverEvent != null) mc.addEventListener(MouseEvent.ROLL_OVER, rollOverEvent);			if (rollOut != null) mc.addEventListener(MouseEvent.ROLL_OUT, rollOut);			if (rollOutEvent != null) mc.addEventListener(MouseEvent.ROLL_OUT, rollOutEvent);		}				public static function createDragable (mc:*, rollOver:Function = null, rollOut:Function = null, mouseDown:Function = null, mouseUp:Function = null):void {			// trace ("  ~ vytvářím táhnutelný objekt", mc.name);						mc.addEventListener(MouseEvent.MOUSE_OVER, itemOver);			mc.addEventListener(MouseEvent.MOUSE_OUT, itemOut);						if (rollOver != null) mc.addEventListener (MouseEvent.ROLL_OVER, rollOver);			if (rollOut != null) mc.addEventListener (MouseEvent.ROLL_OUT, rollOut);			if (mouseDown != null) mc.addEventListener (MouseEvent.MOUSE_DOWN, mouseDown);			if (mouseUp != null) mc.stage.addEventListener (MouseEvent.MOUSE_UP, mouseUp);						function itemOver (e:Event):void {				Mouse.cursor = MouseCursor.BUTTON;			}						function itemOut (e:Event):void {				Mouse.cursor = MouseCursor.AUTO;			}		}				/**		 * 		 * Vytvoří základní pozici a umístění objektu a jeho průhlednost		 * 		 */		public static function positionObject (mc:*, x:* = null, y:* = null, alpha:* = null, rotation:* = null, height:* = null, width:* = null):void {			trace ("  ~ pozicuji a nastavuji objekt", mc.name);			if (x != null ) mc.x = x;			if (y != null ) mc.y = y;			if (rotation != null ) mc.rotation = rotation;			if (alpha != null ) mc.alpha = alpha;			if (height != null) mc.height = height;			if (width != null) mc.width = width;		}				/**		 * 		 * Vytvoří nový textField s daným formatem, fontem a textem		 * 		 * @param text (String) text, který bude vložen do textFieldu		 * @param format (TextFormat) formát textu		 * @param asHTML (Boolean) zda se má text vykreslit pomocí html parseru		 * 		 */		public static function createTextField (text:String, format:TextFormat = null, asHTML:Boolean = false, embedFonts:Boolean = false):TextField {			trace ("  ~ vytvářím textField");						var tf:TextField = new TextField();			if (embedFonts) tf.embedFonts = true;						if (format != null) {				tf.defaultTextFormat = format;				tf.autoSize = flash.text.TextFieldAutoSize.LEFT;			}						if (asHTML) {				tf.htmlText = text;			} else {				tf.text = text;			}						return tf;					}				public static function numToStr (s:String):String {			var a:Array = s.split("");			s = "";			for (var i:int = a.length -1; i > -1; i--) {				if (i == a.length - 4 || i == a.length - 7) s = " " + s;				s = a[i] + s;			}			return s;		}	}}