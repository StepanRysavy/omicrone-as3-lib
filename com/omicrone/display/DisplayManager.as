package com.omicrone.display {	import flash.display.DisplayObject;	import flash.display.MovieClip;	import flash.events.Event;	import flash.events.EventDispatcher;	import com.omicrone.Log;		public class DisplayManager extends EventDispatcher {				private var _x:Number;		private var _x_speed:Number;		private var _x_easing:Boolean;		private var _x_change:Boolean;				private var _y:Number;		private var _y_speed:Number;		private var _y_easing:Boolean;		private var _y_change:Boolean;				private var _alpha:Number;		private var _alpha_speed:Number;		private var _alpha_easing:Boolean;		private var _alpha_change:Boolean;				private var _xscale:Number;		private var _xscale_speed:Number;		private var _xscale_easing:Boolean;		private var _xscale_change:Boolean;				private var _yscale:Number;		private var _yscale_speed:Number;		private var _yscale_easing:Boolean;		private var _yscale_change:Boolean;				private var _rotation:Number;		private var _rotation_speed:Number;		private var _rotation_easing:Boolean;		private var _rotation_change:Boolean;				private var _isInPosition:Boolean;				public static var eRun:String = "DisplayManager_init";		public static var eDone:String = "DisplayManager_done";		public static var ePart:String = "DisplayManager_part_";				public var _mc:DisplayObject;		private var _stepper:MovieClip;				public function DisplayManager (mc:DisplayObject) {			_mc = mc;						//Log.add("init", this.toString());						_isInPosition = true;			_stepper = new MovieClip();						_x = _mc.x;			_x_speed = 5;			_x_easing = true;			_x_change = false;						_y = _mc.y;			_y_speed = 5;			_y_easing = true;			_y_change = false;						_alpha = _mc.alpha;			_alpha_speed = .1;			_alpha_easing = true;			_alpha_change = false;						_xscale = _mc.scaleX;			_xscale_speed = 5;			_xscale_easing = true;			_xscale_change = false;						_yscale = _mc.scaleY;			_yscale_speed = 5;			_yscale_easing = true;			_yscale_change = false;						_rotation = _mc.rotation;			_rotation_speed = 5;			_rotation_easing = true;			_rotation_change = false;		}				// get set		public function set setX (newX:Number):void {			_x = newX;			if (newX != _mc.x) {				newX = Math.round(newX * 10)/10;				//Log.add("změna proměnné x: původní hodnota " + _mc.x + ", nová hodnota " + newX, this.toString());				_x = newX;				_x_change = true;				stepperChecker ();			}		}				public function set setY (newY:Number):void {			_y = newY;			if (newY != _mc.y) {				newY = Math.round(newY * 10)/10;				//Log.add("změna proměnné y: původní hodnota " + _mc.y + ", nová hodnota " + newY, this.toString());				_y = newY;				_y_change = true;				stepperChecker ();			}		}				public function set setAlpha (newAlpha:Number):void {			_alpha = newAlpha;			if (newAlpha != _mc.alpha) {				newAlpha = Math.round(newAlpha * 1000)/1000;				//Log.add("změna proměnné alpha: původní hodnota " + _mc.alpha + ", nová hodnota " + newAlpha, this.toString());				_alpha = newAlpha;				_alpha_change = true;				stepperChecker ();			}		}				public function set setScaleX (newScale:Number):void {			_xscale = newScale;			if (newScale != _mc.scaleX) {				newScale = Math.round(newScale * 1000)/1000;				//Log.add("změna proměnné scale X: původní hodnota " + _mc.scaleY + ", nová hodnota " + newScale, this.toString());				_xscale = newScale;				_xscale_change = true;				stepperChecker ();			}		}				public function set setScaleY (newScale:Number):void {			_yscale = newScale;			if (newScale != _mc.scaleY) {				newScale = Math.round(newScale * 1000)/1000;				//Log.add("změna proměnné scale Y: původní hodnota " + _mc.scaleX + ", nová hodnota " + newScale, this.toString());				_yscale = newScale;				_yscale_change = true;				stepperChecker ();			}		}				public function set setRotation (rot:Number):void {			//Log.add("změna proměnné rotation: původní hodnota " + _mc.rotation + ", nová hodnota " + rot, this.toString());			_rotation = rot;			while (_rotation > 180) {				_rotation -= 360;			}			while (_rotation < -180) {				_rotation += 360;			}			_rotation_change = true;			stepperChecker ();		}				// get				public function get eventPart ():String {			return ePart;		}				// private function		private function stepperChecker ():void {			if (!_stepper.hasEventListener(Event.ENTER_FRAME)) {				//Log.add("spouštím stepper", this.toString());				_isInPosition = false;				dispatchEvent(new Event(eRun));				_stepper.addEventListener(Event.ENTER_FRAME, stepper);			}		}				private function stepper (e:Event):void {			if (paramsDiffer()) {				reduceDifferences();			} else {				//Log.add("ukončuji stepper", this.toString());								_isInPosition = true;				dispatchEvent(new Event(eDone));				_stepper.removeEventListener(Event.ENTER_FRAME, stepper);				}		}				private function paramsDiffer ():Boolean {			var b:Boolean = false;			if (_x_change) b = true;			if (_y_change) b = true;			if (_alpha_change) b = true;			if (_xscale_change) b = true;			if (_yscale_change) b = true;			if (_rotation_change) b = true;			return b;		}				private function reduceDifferences():void {			if (Math.abs(_mc.x - _x) > 1) {				reduceDifference("x", _x, _x_speed, _x_easing);			} else if (_x_change) {				_mc.x = _x;				_x_change = false;				dispatchEvent(new Event (ePart + "x"));			}			if (Math.abs(_mc.y - _y) > 1) { 				reduceDifference("y", _y, _y_speed, _y_easing);			} else if (_y_change) {				_mc.y = _y;				_y_change = false;				dispatchEvent(new Event (ePart + "y"));			}			if (Math.abs(_mc.alpha - _alpha) > .01) {				reduceDifference("alpha", _alpha, _alpha_speed, _alpha_easing, .01);			} else if (_alpha_change) {				_mc.alpha = _alpha;				_alpha_change = false;				dispatchEvent(new Event (ePart + "alpha"));			}			if (Math.abs(_mc.scaleX - _xscale) > .01) {				reduceDifference("scaleX", _xscale, _xscale_speed, _xscale_easing, .01);			} else if (_xscale_change) {				_mc.scaleX = _xscale;				_xscale_change = false;				dispatchEvent(new Event (ePart + "xscale"));			}			if (Math.abs(_mc.scaleY - _yscale) > .01) {				reduceDifference("scaleY", _yscale, _yscale_speed, _yscale_easing, .01);			} else if (_yscale_change) {				_mc.scaleY = _yscale;				_yscale_change = false;				dispatchEvent(new Event (ePart + "yscale"));			}			if (Math.abs(_mc.rotation - _rotation) > 1) {				reduceAngle();			} else if (_rotation_change) {				_mc.rotation = _rotation;				_rotation_change = false;				dispatchEvent(new Event (ePart + "rotation"));			}		}				private function reduceAngle():void {			var currentAngle:Number = _mc.rotation;			var desiredAngle:Number = _rotation;						if (Math.abs(currentAngle - desiredAngle) > 180) {				if (currentAngle < 0) {					reduceDifference ("rotation", _rotation-360, _rotation_speed, _rotation_easing, .01);				} else {					reduceDifference ("rotation", _rotation+360, _rotation_speed, _rotation_easing, .01);				}			} else {				reduceDifference ("rotation", _rotation, _rotation_speed, _rotation_easing, .01);			}		}				private function reduceDifference (param:String, toValue:Number, speed:Number, easing:Boolean, tolerance:Number = 1):void {						if (toValue < _mc[param]) {				if (easing) {					_mc[param] -= (_mc[param] - toValue) / speed;					if (_mc[param] - toValue < tolerance) complete();				} else {					_mc[param] -= speed;					if (toValue > _mc[param]) complete();				}			} else if (toValue > _mc[param]) {				if (easing) {					_mc[param] += (toValue - _mc[param]) / speed;					if (toValue - _mc[param] < tolerance) complete();				} else {					_mc[param] += speed;					if (toValue < _mc[param]) complete();				}			}						function complete ():void {				_mc[param] = toValue;				dispatchEvent(new Event (ePart + param));			}		}				// public function				public function param (p:String):* {			return this["_"+p];		}				public function x (pos:Number, speed:Number = 5, easing:Boolean = true):void {			_x_speed = speed;			_x_easing = easing;			setX = pos;		}				public function y (pos:Number, speed:Number = 5, easing:Boolean = true):void {			_y_speed = speed;			_y_easing = easing;			setY = pos;		}				public function alpha (pos:Number, speed:Number = .1, easing:Boolean = false):void {			_alpha_speed = speed;			_alpha_easing = easing;			setAlpha = pos;		}				public function scaleX (pos:Number, speed:Number = 5, easing:Boolean = true):void {			_xscale_speed = speed;			_xscale_easing = easing;			setScaleX = pos;		}				public function scaleY (pos:Number, speed:Number = 5, easing:Boolean = true):void {			_yscale_speed = speed;			_yscale_easing = easing;			setScaleY = pos;		}				public function rotation (pos:Number, speed:Number = 5, easing:Boolean = true):void {			_rotation_speed = speed;			_rotation_easing = easing;			setRotation = pos;		}				// override				override public function toString():String {			return "[" + _mc.name + " :: DisplayManager] as " + _mc;		}	}}