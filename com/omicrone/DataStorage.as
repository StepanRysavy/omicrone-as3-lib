/**		DataStorage by oMicrone	- úschovna dat		ChangeLog:		0.1 - ADDED: getSetting, setSetting	0.2 - ADDED: create, get, load, update, getStorage	0.3 - ADDED: getDataFromStorage	*/package com.omicrone {		import flash.events.Event;	import flash.events.IOErrorEvent;	import flash.net.URLLoader;	import flash.net.URLRequest;	import flash.system.System;		public class DataStorage {				private static var storage:Array = new Array ();		private static var settings:Object = {};				/**			Umožňuje ukládání objektů do nastavení podle klíče		*/		public static function getSetting (s:String):* {			if (settings[s] != undefined) {				return settings[s];			} else {				return null;			}		}				/**			Vrací požadovaný objekt z nastavení podle klíče		*/		public static function setSetting (s:String, o:*):void {			trace ("  ~ nastavuji", s, "na hodnotu", o);			settings[s] = o;		}				/**			Vytvoří obecný objekt pro ukládání dat		*/		public static function create (name:String, data:* = null):Object {			trace ("  ~ připravuji data storage", name);						var dataHolder:Object = {}			dataHolder.name = name;			dataHolder.type = "";						if (data == null) {				dataHolder.loaded = false;				dataHolder.data = null;			} else {				dataHolder.loaded = true;				dataHolder.data = data;			}						//storage[name] = dataHolder;			storage.push(dataHolder);						return dataHolder;		}				/**		 * Začne načítat data z URL do storage. Pokud storage neexistuje, vytvoří ji		 * 		 * @param name (String) jméno uložiště		 * @param link (String) URL cesta ke zdroji dat		 * @param event (Event) událost volaná po úspěšném načtení		 * @param eventMC (*) objekt, nad kterým se volá událost		 * 		 * @return Object(loaded, data) zspouzdřující jednu konkrétní storage		 * 		 */		public static function load (name:String, link:String, type:String = "general", event:String = null, eventMC:* = null, fce:Function = null, fceE:Function = null):void {			trace ("  ~ načítám data do storage", name);						var dataHolder:Object = getStorage (name, true);						if (dataHolder.data != null && dataHolder.type == "XML") System.disposeXML (dataHolder.data);						var loader:URLLoader = new URLLoader();			dataHolder.loader = loader;			dataHolder.loaded = false;						loader.addEventListener (Event.COMPLETE, loadComplete);			if (fce != null) loader.addEventListener(Event.COMPLETE, fce);			loader.addEventListener (IOErrorEvent.IO_ERROR, loadError);			if (fceE != null) loader.addEventListener (IOErrorEvent.IO_ERROR, fceE);						trace ("  ~ začínám načítat data do storage", name);						loader.load (new URLRequest(link));						function loadError(e:IOErrorEvent):void {				trace ("  ~","chyba načítání dat z adresy", link);				if (eventMC != null) eventMC.dispatchEvent (new Event ("error"));			}						function loadComplete (e:Event):void {				trace ("  ~","data úspěšně načtena z adresy", link);				if (type == "general") dataHolder.data = loader.data;				if (type == "XML") dataHolder.data = new XML (loader.data);				if (type == "BitmapData") dataHolder.data = loader;				dataHolder.loaded = true;				if (eventMC != null) eventMC.dispatchEvent (new Event (event));			}		}				public static function getStorage (name:String, createIfNotExists:Boolean = false):Object {			trace ("  ~ vracím dataHolder", name);						for (var i:uint=0; i < storage.length; i++) {				if (storage[i].name == name) return storage[i];			}						if (createIfNotExists) return create (name);						return null;		}				/**			Vrátí data ze storage podle zadaného jména		*/		public static function getDataFromStorage (dataStorage:Object = null):* {			trace ("  ~ vracím data ze storage", dataStorage.name);						if (dataStorage == null) {				return null;			} else {				if (dataStorage.loaded) {					return dataStorage.data;				} else {					return null;				}			}		}				/**			Vrátí data ze storage podle jména		*/		public static function get (name:String):* {			trace ("  ~ vracím data podle názvu", name);						return getDataFromStorage (getStorage (name));		}				/**			Updatuje data v storage		*/		public static function update (name:String, data:*):void {			trace ("  ~ aktualituji data ve storage", name);						var dataStorage:Object;						if (getStorage (name) == null) {				dataStorage = create (name, data);			} else {				dataStorage = getStorage (name);				dataStorage.data = data;			}		}				/**		 * Vytvoří hlídače načítání a dokud nebudou načtena všechna storage, tak bude čekat, poté vrátí event		 * 		 * @param mc (DisplayObject) ukazuje na root		 * @param event (String) představuje událost, která se zavolá po úplném načtení všech storage		 * 		 */ 		public static function waitToLoad (eventMC:*, event:String):void {			trace ("  ~ čekám na načtení všech storage");						eventMC.addEventListener (Event.ENTER_FRAME, stepper);						function stepper (e:Event):void {				var loaded:Boolean = true;								for (var i:uint = 0; i < storage.length; i++) {					if (!storage[i].loaded) loaded = false;				}									if (loaded) {					trace ("  ~ všechna storage načtena");					eventMC.removeEventListener (Event.ENTER_FRAME, stepper);					eventMC.dispatchEvent (new Event (event));				}			}					}	}}