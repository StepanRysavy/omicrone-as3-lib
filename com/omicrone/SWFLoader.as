/**		SWFLoader by oMicrone	- správa načítání flashů		ChangeLog:	0.1 - ADDED: getSetting, setSetting	0.2 - ADDED: create, force, load, get, isLoaded, getLoadStatus, getByID	0.3 - ADDED: getLast	*/package com.omicrone {		import flash.events.Event;	import flash.events.ProgressEvent;	import flash.display.DisplayObject;	import flash.display.MovieClip;	import flash.display.Loader;	import flash.events.IOErrorEvent;	import flash.geom.Rectangle;	import flash.display.Shape;	import flash.display.Bitmap;	import flash.display.BitmapData;	import flash.net.URLRequest;		public class SWFLoader {				private static var globals:Object = {};		private static var settings:Object = {};		private static var storage:Array = new Array ();				/**			Umožňuje ukládání objektů do nastavení podle klíče		*/		public static function getSetting (s:String):* {			if (settings[s] != undefined) {				return settings[s];			} else {				return null;			}		}				/**			Vrací požadovaný objekt z nastavení podle klíče		*/		public static function setSetting (s:String, o:*):void {			trace ("  ~ nastavuji", s, "na hodnotu", o);			settings[s] = o;		}				// LOADS				/**			Funkce vytvoří nový objekt, který je kontrolorem informací flashe v rámci třídy			Funkce se volá buď přímo, nebo jako součást funkce force(), aby byla zachována konzistence a unikátnost v rámci třídy		*/		public static function create (link:String, target:* = null, name:String = null):Object {			trace ("  ~ vytvářím nový flash info objekt", name);						var swf:Object = {};			storage.push(swf);						swf.init = false;			swf.done = false;			swf.loaded = 0;			swf.total = 0;			swf.percent = 0;			swf.name = name;			swf.link = link;			swf.target = target;			swf.id = storage.length - 1;						if (swf.name == null) swf.name = "swf-" + new Date ().getTime();									return swf;		}				/**			Zrychlené načítání			Funkce spojuje oddělené funkce create() a load() a umožňuje po nahrání vytvoření okamžité kopie do daného MC			Funkce podporuje dynamické události		*/		public static function force (link:String, target:MovieClip, name:String = null, event:String = null, eventMC:DisplayObject = null):uint {			trace ("  ~ okamžité načtení flashe", link, "do", target.name);						var swf:Object = create (link, target, name);						globals.cache = swf.id;			load (swf, event, eventMC);						return globals.cache;		}				/**			Načtení flashe podle jeho indexu			Funkce podporuje dynamické události a okamžité diplikování do MC		*/		public static function loadByID (id:uint, event:String = null, eventMC:DisplayObject = null):void {			trace ("  ~ načtení flashe podle id", id);						load (getByID(id), event, eventMC);		}				/**			Načtení flashe podle uživatelského jména			Funkce podporuje dynamické události a okamžité diplikování do MC		*/		public static function loadByName (s:String, event:String = null, eventMC:DisplayObject = null, target:MovieClip = null):void {			trace ("  ~ načtení falshe podle jména", s);						load (get(s), event, eventMC);		}				/**			Nahrání obrázku			Funkce nahraje obrázek podle informací z obecného objektu Image, část těchto funkcí je také aktualizována (velikost, stav nahrávání, ..)			Funkce podporuje dynamické události a okamžité diplikování do MC		*/		public static function load (swf:Object, event:String = null, eventMC:DisplayObject = null):void {			trace ("  ~ načtení flashe", swf.link);						var loader:Loader = new Loader ();						loader.contentLoaderInfo.addEventListener (Event.INIT, loadStart);			loader.contentLoaderInfo.addEventListener (Event.COMPLETE, loadComplete);			loader.contentLoaderInfo.addEventListener (IOErrorEvent.IO_ERROR, loadError);				loader.contentLoaderInfo.addEventListener (ProgressEvent.PROGRESS, loadProgress);						swf.target.addChild (loader);						function loadStart (e:Event):void {				trace ("  ~ flash nalezen na", swf.link, ", začíná načítání");								swf.init = true;			}						function loadComplete (e:Event):void {				trace ("  ~ flash úspěšně načten z", swf.link);								swf.done = true;								if (eventMC != null) eventMC.dispatchEvent (new Event (event));			}						function loadError (e:Event):void {				trace ("  ~ chyba načítání z adresy", swf.link);				if (eventMC != null) eventMC.dispatchEvent (new Event ("error"));			}						function loadProgress (e:ProgressEvent):void {				swf.percent = e.bytesLoaded / e.bytesTotal;				swf.total = e.bytesLoaded;				swf.loaded = e.bytesTotal;			}						loader.load (new URLRequest(swf.link));		}				// CHECKS				/**			Kontrola stavu nahrávání			Prochází celou galerii nebo její část definovanou indexy, zda jsou všechny flashe načteny		*/		public static function isLoaded (... restParam):Boolean {			trace ("  ~","kontrola načtení obrázků");						var startIndex:uint = 0;			var endIndex:uint = globals.imageList.length;			var loaded:Boolean = true;						if (restParam[0] != undefined) startIndex = new uint (restParam[0]);			if (restParam[1] != undefined) endIndex = new uint (restParam[1]);						for (var i:uint=startIndex; i<endIndex; i++) {				if (!storage[i].done) loaded = false;			}						return loaded;		}				/**			Vrací informace o daném flashi podle jeho indexu			Funkce zajišťuje cache pro úsporu hledání napříč galerií		*/		public static function getByID (id:uint):Loader {			trace ("  ~ hledám informace o flashi s ID", id);						globals.cache = id;						return storage [id].target.getChildAt(0);		}				/**			Vrací informace o flashi podle jeho jména			Využívá funkce cache		*/		public static function get (name:String):Loader {			trace ("  ~ hledám informace o flashi s id", name);						if (storage[globals.cache].name == name) {				trace ("  ~ flash nalezen v cache");								return getByID (globals.cache);			}						for (var i:uint=0; i < storage.length; i++) {				if (storage[i].name == name) {										globals.cache = i;										return getByID (i);				}			}						return null;		}				public static function getLast ():Object {			trace ("  ~ hledám informace o posledním inicializovaném flashi");						return getByID (globals.cache);		}				/**			Vrací stav nahrávání pro galerii nebo její část definovanou indexy		*/		public static function getLoadStatus (... restParam):Object {			trace ("  ~ stav načtení všech flashů");						var startIndex:uint = 0;			var endIndex:uint = globals.imageList.length;			var loaded:Object = {};						loaded.loaded = new uint(0);			loaded.total = new uint(0);						if (restParam[0] != undefined) startIndex = new uint (restParam[0]);			if (restParam[1] != undefined) endIndex = new uint (restParam[1]);						for (var i:uint=startIndex; i<endIndex; i++) {				loaded.loaded += storage[i].loaded;				loaded.total += storage[i].total;			}						loaded.percent = Math.round(loaded.loaded / loaded.total * 1000)/10;						return loaded;		}	}}