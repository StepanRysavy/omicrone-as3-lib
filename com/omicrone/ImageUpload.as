package com.omicrone {		import flash.events.DataEvent;	import flash.events.Event;	import flash.events.EventDispatcher;	import flash.events.HTTPStatusEvent;	import flash.events.IOErrorEvent;	import flash.events.ProgressEvent;	import flash.events.SecurityErrorEvent;	import flash.net.FileFilter;	import flash.net.FileReference;	import flash.net.URLRequest;	import flash.utils.setTimeout;		public class ImageUpload extends EventDispatcher {				private var _server:String = "";		private var _location:String = "";		private var _php:String = "";		private var _filepath:String = "";		private var _prefix:String = "";		private var _usePrefix:Boolean = false;		private var _uploadFinish:Boolean = false;		private var _imageTypes:FileFilter;		private var _allTypes:Array;		private var _fileRef:FileReference;				private var CLASS_NAME:String = "ImageUpload";				public function ImageUpload (server:String, location:String, uploadScript:String, prefix:String = "", randomPrefix:Boolean = true, progressFce:Function = null) {			Log.add("spouštím výběr souboru", CLASS_NAME);						_server = server;			_location = location;			_php = uploadScript;			_prefix = prefix;			_usePrefix = randomPrefix;						_imageTypes = new FileFilter("Obrázky (*.jpg, *.jpeg, *.gif, *.png)","*.jpg; *.jpeg; *.gif; *.png");			_allTypes = new Array(_imageTypes);			_fileRef = new FileReference();						_fileRef.addEventListener (Event.CANCEL, cancelHandler);			_fileRef.addEventListener (HTTPStatusEvent.HTTP_STATUS, httpStatusHandler);			_fileRef.addEventListener (IOErrorEvent.IO_ERROR, ioErrorHandler);			_fileRef.addEventListener (Event.OPEN, openHandler);			_fileRef.addEventListener (ProgressEvent.PROGRESS, progressHandler);			_fileRef.addEventListener (SecurityErrorEvent.SECURITY_ERROR, securityErrorHandler);			_fileRef.addEventListener (Event.SELECT, selectHandler);			_fileRef.addEventListener (DataEvent.UPLOAD_COMPLETE_DATA,uploadCompleteDataHandler);			_fileRef.addEventListener (Event.COMPLETE, uploadCompleteDataHandler);						if (progressFce != null) _fileRef.addEventListener (ProgressEvent.PROGRESS, progressFce);									try {				var success:Boolean = _fileRef.browse(_allTypes);			} catch (error:Error) {				Log.add ("Nelze provést výběr souboru", CLASS_NAME);			}		}				public function set php (url:String):void {			_php = url;		}				public function set prefix (newPrefix:String):void {			_prefix = newPrefix;		}				public function set useTimeRandomPrefix (usePrefix:Boolean):void {			_usePrefix = usePrefix;		}				public function get filepath ():String {			if (_uploadFinish) {				return _filepath;			}			return null;		}				private function selectHandler (e:Event):void {			Log.add("byl vybrán soubor", CLASS_NAME);						var prefix:String = "";						if (_prefix.length > 0) {				prefix = _prefix + "_";			}						if (_usePrefix) {				prefix += (new Date()).time + "_" + (Math.round(Math.random()*1000)) + "_";			}						var file:FileReference = FileReference(e.target);						Log.add("nahrávání souboru: " + (_server + _php + "?prefix=" + prefix + "&location=" + _location), CLASS_NAME);						var req:URLRequest = new URLRequest(_server + _php + "?prefix=" + prefix + "&location=" + _location);						_filepath = _server + _location + prefix + file.name;						try {				_fileRef.upload (req);			} catch (error:Error) {				Log.add("nelze nahrát soubor", CLASS_NAME);				uploadCancelGeneric();			}		}				private function cancelHandler (e:Event):void {			Log.add("výběr souboru k nahrání na server byl zrušen", CLASS_NAME);			uploadCancelGeneric();		}				private function uploadCompleteDataHandler (e:Event):void {			if (_uploadFinish == false) {				Log.add("soubor byl nahrán na server", CLASS_NAME);				setTimeout(fileUploadProcessCompleteHandler, 2000);			}			_uploadFinish = true;		}				private function httpStatusHandler (e:HTTPStatusEvent):void {			Log.add("při nahrávání na server došlo k chybě", CLASS_NAME);			uploadCancelGeneric();		}				private function ioErrorHandler (e:IOErrorEvent):void {			Log.add("chyba zápisu", CLASS_NAME);			uploadCancelGeneric();		}				private function openHandler (e:Event):void {			Log.add("soubor se nahrává na server", CLASS_NAME);		}				private function progressHandler (e:ProgressEvent):void {			var proc:Number = Math.round((e.bytesLoaded/e.bytesTotal)*100);			Log.add("soubor se nahrává na server: " + proc + " %", CLASS_NAME);			if (proc == 100) {				_fileRef.dispatchEvent(new Event(DataEvent.UPLOAD_COMPLETE_DATA));			}		}				private function securityErrorHandler (e:SecurityErrorEvent):void {			Log.add("soubor nemohl být nahrát, bezpečnostní podmínka", CLASS_NAME);		}				private function fileUploadProcessCompleteHandler ():void {			dispatchEvent (new Event ("uploadComplete"));		}				private function uploadCancelGeneric () {			dispatchEvent (new Event ("uploadCancel"));		}	}}